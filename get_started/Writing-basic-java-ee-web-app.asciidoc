== Writing a Basic Java EE Web Application

For the most part, people looking at Forge are likely interested in creating web-applications. Thusly, this chapter will overview the basic steps to generate such an application using Forge.

=== Get Started with Scaffolding

Assuming you have already completed the steps to install Forge, the first thing you'll need to do is download and install a Java EE application server, for example http://www.jboss.org/jbossas/downloads.html[JBoss Application Server 7]. This server will host your application once it is built.

Next, follow these steps to create your skeleton web-application; be sure to replace any `{ARGS}` with your own personal values. Also keep in mind that while typing commands, you may press *TAB* at any time to see command completion options:

=== Start Forge

Execute `forge` from a command prompt, or open your shortcut, if you created one during the installation process.

=== Create a new project

----
$ project-new --named conference
----

=== Create a new JPA entity	

----
[conference]$ jpa-new-entity --named Speaker 
----

At which point Forge will automatically pick-up the newly created entity, and will be ready to add fields. We refer to this as "holding" an entity, or "holding" a file.

----
[Speaker.java]$ jpa-new-field --named firstname 
[Speaker.java]$ jpa-new-field --named surname 
[Speaker.java]$ jpa-new-field --named bio --length 2000 
[Speaker.java]$ jpa-new-field --named twitter 
----

While "holding" most files, you may inspect them using `ls`.

----
[Speaker.java]$ ls

[fields]
bio::java.lang.String        id::java.lang.Long           twitter::java.lang.String
firstname::java.lang.String  surname::java.lang.String    version::int

[methods]
equals(java.lang.Object)::boolean     getSurname()::java.lang.String        setBio(java.lang.String)::void        setTwitter(java.lang.String)::void
getBio()::java.lang.String            getTwitter()::java.lang.String        setFirstname(java.lang.String)::void  setVersion(int)::void
getFirstname()::java.lang.String      getVersion()::int                     setId(java.lang.Long)::void           toString()::java.lang.String
getId()::java.lang.Long               hashCode()::int                       setSurname(java.lang.String)::void

[Speaker.java]$
----

=== Generate some UI scaffolding!

Once you have created fields in the entity, it's time to generate some scaffolding for `Speaker`.

----
[Speaker.java]$ scaffold-generate --targets org.example.model.Speaker
***SUCCESS*** CDI has been installed.
***SUCCESS*** EJB has been installed.
***SUCCESS*** Servlet API has been installed.
***SUCCESS*** JavaServer Faces has been installed.
***SUCCESS*** Scaffold was generated successfully.
***SUCCESS*** Generated UI for [com.scaffold.domain.Customer]
[Speaker.java]$
----

=== That's it! Now build your project and deploy it onto your Java EE Application Server of choice

----
[Speaker.java]$ build
----
