== Developing an Addon

Forge addons are simple Maven projects with a special classifier "forge-addon". This classifier is used while installing an addon so the Furnace container can calculate its dependencies, freeing you from http://robjsoftware.org/2007/07/13/classloader-hell/[Classloader hell].

One of the most important things to know about developing a Forge addon, is that the Furnace runtime container (the core of Forge),
is actually an embeddable, modular Java container. This means that each addon has its own `ClassLoader` and that
addons share classes from each other, in addition to supplying their own local classes. Furnace builds a graph of
addon dependencies at runtime, and automatically calculates which addons should see classes from other addons. 

For now, however, just treat your first addon as if it were any other Java project. The differences between a "modular" and
"traditional" environment are not as great as you might think, and the Furnace development model has been created in
a way that should make these differences seem natural, almost transparent. 

=== Create a Forge Addon Maven project

[TIP]
====
This can be done using the Forge `Project: New` command.

[source,forge]
----
project-new --named example --type addon
----
====

Forge Addons must be JARs published with a 'forge-addon' classifier. Add this plugin configuration to your pom.xml _(if it is not already there)_:

[source,xml]
----
<build>
   <plugins>
      <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jar-plugin</artifactId>
         <executions>
            <execution>
               <id>create-forge-addon</id>
               <phase>package</phase>
               <goals>
                  <goal>jar</goal>
               </goals>
               <inherited>false</inherited>
               <configuration>
                  <classifier>forge-addon</classifier>
               </configuration>
            </execution>
         </executions>
      </plugin>
   </plugins>
</build>
----

==== Add a Furnace container

_(Skip this step if you used the `Project: New` command from the previous step.)_

In order to use CDI and services from other addons in your addon, you'll need to reference the Furnace CDI container addon as a dependency your _pom.xml_ file. Your choice of default Furnace container (CDI or Simple) will control your addon's lifecycle.

You may also choose to omit a Furance container - this means your addon will not produce any services, will not start any jobs, and can only be used as a modular library by other addons. Alternatively, you can implement your own Furnace container, but that is a discussion for link:https://github.com/forge/furnace/blob/master/container-api/src/main/java/org/jboss/forge/furnace/lifecycle/AddonLifecycleProvider.java#L20[another document].

[source,xml]
----
<dependency>
   <groupId>org.jboss.forge.furnace.container</groupId>
   <artifactId>cdi</artifactId>
   <classifier>forge-addon</classifier>
   <scope>provided</scope>
</dependency>
----

CAUTION: Addon dependencies *MUST* be declared in the Maven pom.xml that produces your `forge-addon` classified artifact; otherwise, Furnace will *NOT* use this dependency as a `forge-addon`. Instead, addon dependencies declared via transitive dependencies will be included as local JAR files and re-bundled with your addon. More than likely, re-bundling a `forge-addon` in your Addon is *NOT* what you want.

Your complete POM should now look something like this:

[source,xml]
----
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>

   <groupId>com.example</groupId>
   <artifactId>example</artifactId>
   <version>0.0.1-SNAPSHOT</version>
   
   <name>My First Addon</name>

   <dependencies>
   
      <!-- Furnace Container -->
      <dependency>
         <groupId>org.jboss.forge.furnace.container</groupId>
         <artifactId>cdi</artifactId>
         <classifier>forge-addon</classifier>
         <scope>provided</scope>
      </dependency>
   </dependencies>

   <build>
      <plugins>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
               <execution>
                  <id>create-forge-addon</id>
                  <phase>package</phase>
                  <goals>
                     <goal>jar</goal>
                  </goals>
                  <inherited>false</inherited>
                  <configuration>
                     <classifier>forge-addon</classifier>
                  </configuration>
               </execution>
            </executions>
         </plugin>
      </plugins>
   </build>
</project>
----

=== Add behavior to your addon

A service is implemented as a POJO (Plain Old Java Object): 

[source,java]
----
public class ExampleServiceImpl
{
   public ServiceResult doSomething() {
        // Do stuff...
   }
}
----

However, best practices favor creating a service interface, otherwise consumers will be required to request your specific service implementation. For example:

[source,java]
----
public interface ExampleService
{
   public ServiceResult doSomething();
}
----

Then simply implement the service interface:

[source,java]
----
public class ExampleServiceImpl implements ExampleService
{
   public ServiceResult doSomething() {
        // Do stuff...
   }
}
----



=== Include functionality from standard Java libraries

TIP: (See also <<Re-use functionality from other addons>>.) 

Forge addons are no different from any other Java project, in the sense that they can include and re-use functionality from other Java projects' JAR files. In order to achieve this, you must add jar-dependencies in your addon's `pom.xml` file. Consider the following example:

[source,xml]
----
<project>
   ...
   
   <dependencies>
      <!-- Local Dependencies -->
      <dependency>
         <groupId>org.example</groupId>
         <artifactId>library</artifactId>
         <version>1.0.0</version>
      </dependency>
      
      <!-- Addon Dependencies -->
      ...

      <!-- Furnace Container -->   
      <dependency>
         <groupId>org.jboss.forge.furnace.container</groupId>
         <artifactId>cdi</artifactId>
         <classifier>forge-addon</classifier>
         <scope>provided</scope>
      </dependency>
   </dependencies>
   
   ...
</project>
----


==== What scope should my library dependencies be?

There are is a simple rule that makes this decision easy:

----
If your addon exposes the library in its public API, the library should be `<scope>compile</scope>` and `<optional>false</optional>` (this is the default).
If your addon consumes the library in its private implementation, and does *NOT* expose the library in public APIs, then the library should be `<optional>true</optional>`.
----

TIP:: These settings apply only to the `pom.xml` in `forge-addon` classified artifact. (See: <<Create a Forge Addon Maven project>>.)


In this example, the `TypeFromLibary` class comes from the `org.example:libary:1.0.0` dependency, and `YourPublicApi` is a type defined within the addon under development.

[cols="1a,2,3", options="header"]
|===
|Example |Scope should be |Explanation

|
[source,java]
----
import org.example.TypeFromLibrary;

public class YourPublicApi {
   public TypeFromLibary getResult() {
      return new TypeFromLibrary("exposed");
   }
}
----
|`compile` (*not* `optional`)
|Types from the library are published in your addon's public API. Consumers of your addon compile against classes or interfaces from the included library.

In this example, the `TypeFromLibary` class comes from the `org.example:libary:1.0.0` dependency.

|
[source,java]
----
import org.example.TypeFromLibrary;

public class YourPublicApi {
   public String getResult() {
      return new TypeFromLibrary("internal")
         .toString();
   }
}
----
|`compile` *and* `optional`
|Types from the library are *NOT* published in your addon's public API, and are only used internally as an implementation detail. Consumers of your addon do *NOT* compile against classes or interfaces from the included library.

|===   




=== Re-use functionality from other addons

Forge has a modular architecture that enables you to re-use functionality from other addons, directly in your own addon code. This is useful for including things like common Java libraries, or libraries specific to your addon's behavior. In order to achieve this, you must add addon-dependencies in your `pom.xml` file.

TIP: (See also: <<Include functionality from standard Java libraries>>)

[source,xml]
----
<project>
   ...
   
   <dependencies>
      <!-- Local Dependencies -->
      ...
      
      <!-- Addon Dependencies -->
      <dependency>
         <groupId>org.jboss.forge.addon</groupId>
         <artifactId>resources</artifactId>
         <classifier>forge-addon</classifier>
         <scope>provided</scope>
      </dependency>
      <dependency>
         <groupId>org.jboss.forge.addon</groupId>
         <artifactId>ui</artifactId>
         <classifier>forge-addon</classifier>
         <scope>provided</scope>
      </dependency>

      <!-- Furnace Container -->   
      <dependency>
         <groupId>org.jboss.forge.furnace.container</groupId>
         <artifactId>cdi</artifactId>
         <classifier>forge-addon</classifier>
         <scope>provided</scope>
      </dependency>
   </dependencies>
   
   ...
</project>
----

==== What scope should my addon dependencies be?

There is a simple rule that will make this an easy decision:  

____
"`compile` if it shows, `provided` if nobody knows, `optional` if it comes and goes"
____

To explain, if you never publicly expose types (classes, interfaces, etc...) from another addon in the outward-facing APIs of your addon, then you should include that addon as `provided` scope. If you do, however, expose classes from that addon in the public APIs of your code, then that addon should be labeled as `compile` scope (default,) which means that this dependency will be *'exported'* to consumers that depend on your addon.

Addon dependencies may also be made `optional` if consumers of your addon should be able to choose whether or not
certain functionality is enabled, or if your addon behaves differently when other addons are already deployed to the
container. E.g. Your addon may enable additional features if an `<optional>` addon becomes installed into the Furnace runtime.

The following chart explains this in detail. Assume that our addon depends on the `resources` addon, which provides
the `ResourceFactory` and `FileResource` classes:

[cols="1a,2,3", options="header"]
|===
|Example |Scope should be |Explanation

|
[source,java]
----
public class InternalExample {
   @Inject private ResourceFactory factory;

   public void doSomething(File file) {
      Resource<?> r = factory.create(file);
      System.out.println("New resource: " + r)
   }
}
----
|`provided`
|Consumers of your addon never see classes or interfaces from the resources addon; it is only used internally as an
implementation detail.

|
[source,java]
----
public class ExposedExample {
   public Resource<?> doSomething(File file) {
      Resource<?> r = factory.create(file);
      return r;
   }
}
----
|`compile`
|Consumers of your addon require classes from the `resources` addon to interact with your code, since it has been used
in the public APIs of your classes.

|
[source,java]
----
public class TransitiveExample {
   public void doSomething(Facet<?> f) {
      System.out.println("I got a facet! " + f);
   }
}
----
|`compile`
|Consumers of your addon require classes from the `facets` addon to interact with your code, which is an exported
dependency of the `resources` addon.

The `Facet` class comes from the `facets` addon and is used in the public APIs of your addon.

|===   

 

=== Test your addon

One of the most important concepts of writing a Forge addon is writing tests using the Furnace test harness. This
allows you to test your code in an actual Furnace environment, and verify that things are behaving as expected. Typically
we suggest using a separate project to test your addon in order to keep concerns separate, which tends to lead to cleaner
code and fewer surprises.

For simplicity's sake, we'll assume that your addon uses the default Furnace container (`org.jboss.forge.furnace.container:cdi`).

==== Set up the test-harness in your build descriptor (pom.xml)

Add the following dependencies to your pom.xml file if they are not already there. Make sure that the Furnace versions
are the same as the rest of your project.

[source,xml]
----
<dependency>
   <groupId>org.jboss.forge.furnace.test</groupId>
   <artifactId>furnace-test-harness</artifactId>
   <version>FURNACE_VERSION</version>
   <scope>test</scope>
</dependency>
<dependency>
   <groupId>org.jboss.forge.furnace.test</groupId>
   <artifactId>arquillian-furnace-classpath</artifactId>
   <version>FURNACE_VERSION</version>
   <scope>test</scope>
</dependency>
----

If you are writing tests in a separate project or sub-project, you should also add a dependency to your addon, or
to the addon you wish to test (you can test anything you like.)

[source,xml]
----
<dependency>
   <groupId>com.example</groupId>
   <artifactId>example</artifactId>
   <classifier>forge-addon</classifier>
   <version>YOUR_VERSION</version>
   <scope>test</scope>
</dependency>
----

==== Write your first test

Now, you'll need to create a test class with the following layout, using the standard JUnit test APIs:

[TIP]
====
This can be done using the Forge `Addon: New Test" command:
----
addon-new-test --named MyServiceTest
----
====

[source,java]
----
package org.example;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.forge.arquillian.archive.ForgeArchive;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(Arquillian.class)
public class ExampleAddonTest
{

   @Deployment
   @Dependencies({
         @AddonDependency(name = "org.jboss.forge.furnace.container:cdi"),
         @AddonDependency(name = "org.jboss.forge.addon:core") })
   public static ForgeArchive getDeployment()
   {
      ForgeArchive archive = ShrinkWrap
            .create(ForgeArchive.class)
            .addBeansXML()
            .addAsAddonDependencies(
                  AddonDependencyEntry.create("org.jboss.forge.furnace.container:cdi"),
                  AddonDependencyEntry.create("org.jboss.forge.addon:core"));
      return archive;
   }
   
   @Test
   public void testSomething() throws Exception {
      Assert.fail("Not implemented");
   }
}
----

Then you'll need to add some configuration so that your addon will be deployed to the test environment. This is done
using the `@AddonDependency` annotation. You'll also need to add an addon dependency link from your test case
to your addon (otherwise the test case will not be able to use any of your addon's classes or services.)

[source,java]
----
@RunWith(Arquillian.class)
public class ExampleFurnaceTest {

   @Deployment
   @Dependencies({
      @AddonDependency(name = "org.jboss.forge.furnace.container:cdi"),
      @AddonDependency(name = "org.example:example")
   })
   public static ForgeArchive getDeployment() {
      ForgeArchive archive = ShrinkWrap.create(ForgeArchive.class)
         .addBeansXML()
         .addAsAddonDependencies(
            AddonDependencyEntry.create("org.jboss.forge.furnace.container:cdi"),
            AddonDependencyEntry.create("org.example:example")
         );
      return archive;
   }

   @Test
   public void testSomething() throws Exception {
      Assert.fail("Not implemented");
   }
}
---- 

Now that the test case deploys and depends on your addon, you may access services from it via injection (because your test deployment also depends on the Furnace CDI container):

[source,java]
----
@RunWith(Arquillian.class)
public class ExampleFurnaceTest {

   @Deployment
   @Dependencies({
       @AddonDependency(name = "org.example:example"),
       @AddonDependency(name = "org.jboss.forge.furnace.container:cdi")
   })
   public static ForgeArchive getDeployment() {
      ForgeArchive archive = ShrinkWrap.create(ForgeArchive.class)
         .addBeansXML()
         .addAsAddonDependencies(
            AddonDependencyEntry.create("org.example:example"),
            AddonDependencyEntry.create("org.jboss.forge.furnace.container:cdi")
         );
      return archive;
   }
   
   @Inject
   private ExampleService service;

   @Test
   public void testSomething() throws Exception {
      Assert.assertNotNull(service);
      Assert.assertNotNull(service.doSomething());
   }
}
---- 

This is the basic premise of using the test-harness. For detailed examples, take a 
https://github.com/forge/core/tree/2.0/resources/tests/src/test/java/org/jboss/forge/addon/resource[look at some of the existing
Forge test cases] in our github repository.

NOTE: The `version` parameter in `@AddonDependency` and in the `AddonDependencyEntry.create(...)` method are optional. Omitting the version means that the test harness will attempt to resolve the version based on the tests' build descriptor (pom.xml). In this case, if the dependent addon is not present in the tests' `pom.xml`, the test execution will fail, and you must specify a version in the test, or add the dependency to the `pom.xml`.

=== Install your addon in the local maven repository:

[source,cmd]
----
    mvn clean install
----

Run

[source,cmd]
----
    ./forge --install yourgroupId:artifactId,version
----

WARNING: This coordinate is *NOT* the same as maven's. You MUST use a comma (,) between the artifactId and the version**

=== Install your Addon
 
Depending on the Forge environment in which you are running, installation steps will differ. 

From Eclipse:: Open the Forge quick-assist menu, select either "Build and install an Addon" or "Install an addon" to build and install your project, or install a pre-built maven artifact.

From the system Shell:: Make sure that you have run a _mvn install_ prior to executing _forge --install groupId:artifactId,version_ on the native system terminal command line.

From the Forge Shell:: Make sure that you have run a _mvn install_ prior to executing _addon-install --coordinate groupId:artifactId,version_ on the Forge shell command line.

From the Forge Shell (During development):: Run _addon-build-and-install --projectRoot /path/to/addon-source-project_ (or if you are currently cd'd into the addon project structure, simply run _addon-build-and-install_, and Forge will automatically install the current project as an addon.)
