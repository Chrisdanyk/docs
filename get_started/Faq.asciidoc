== How do I...

== Keep the old 2.x syntax in my scripts or in Forge 3.x? 

Forge 3.x has changed the option names syntax to a dashed and lowercased structure (eg. --target-package instead of --targetPackage as it was in 2.x).
Run the following command if you want to get back to the old 2.x syntax: 

[source,bash]
----
config-set --key org.jboss.forge.ui.shell_option_style --value 2.x
----

And the following command if you want to revert back to the 3.x style: 

[source,bash]
----
config-clear --key org.jboss.forge.ui.shell_option_style
----


=== Store state between command invocations? 

You can use the *Configuration* addon for that. See link:https://github.com/forge/core/tree/master/configuration#features[this link] for an example.

=== Have the full Project configured in my ProjectListener?

`ProjectListener` is fired right after the project is created (in `ProjectFactory`), and therefore not all the data provided in the *Project: New* wizard will be available. The recommended approach is to create a `ProjectListener` and listen for the postCommandExecuted event, like the following:

[source,java]
----
/**
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Eclipse Public License version 1.0, available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

package org.myaddon.project;

import java.util.Stack;

import javax.inject.Singleton;

import org.jboss.forge.addon.projects.Project;
import org.jboss.forge.addon.projects.ProjectListener;
import org.jboss.forge.addon.projects.facets.MetadataFacet;
import org.jboss.forge.addon.ui.command.AbstractCommandExecutionListener;
import org.jboss.forge.addon.ui.command.UICommand;
import org.jboss.forge.addon.ui.context.UIExecutionContext;
import org.jboss.forge.addon.ui.output.UIOutput;
import org.jboss.forge.addon.ui.result.Result;

/**
 * Listen for project creation and displays in the current output
 *
 * @author <a href="mailto:ggastald@redhat.com">George Gastaldi</a>
 */
@Singleton
public class ShowProjectInfoListener extends AbstractCommandExecutionListener implements ProjectListener
{
   private final Stack<Project> projects = new Stack<Project>();

   @Override
   public void projectCreated(Project project)
   {
      // Push to a stack for later processing
      projects.push(project);
   }

   @Override
   public void postCommandExecuted(UICommand command, UIExecutionContext context, Result result)
   {
      while (!projects.isEmpty())
      {
         Project project = projects.pop();
         UIOutput output = context.getUIContext().getProvider().getOutput();
         output.info(output.out(), "Created project: " + project.getFacet(MetadataFacet.class).getProjectName());
      }
   }

   @Override
   public void postCommandFailure(UICommand command, UIExecutionContext context, Throwable failure)
   {
      // Failure, discard all created projects in this case
      projects.clear();
   }
}
----

=== Adding steps on existing wizards

Suppose you want to add a new step to the `Project: New` wizard. The easiest way to do that is by implementing a `UICommandTransformer`:

[source,java]
----
public class NewProjectTransformer implements UICommandTransformer {
	@Override
	public UICommand transform(UIContext context, UICommand original) {
		if (NewProjectWizard.class.isAssignableFrom(original.getMetadata(context).getType())) {
			return new MyNewProjectCommand();
		} else {
			return original;
		}
	}
}

...

public class MyNewProjectCommand extends AbstractUICommand implements UIWizard {

	@Override
	public UICommandMetadata getMetadata(UIContext context) {
		return Metadata.forCommand(MyNewProjectCommand.class);
	}

	@Override
	public void initializeUI(UIBuilder builder) throws Exception {
	}

	@Override
	public Result execute(UIExecutionContext context) throws Exception {
		return Results.success();
	}

	@Override
	public NavigationResult next(UINavigationContext context) throws Exception {
		NavigationResultBuilder builder = NavigationResultBuilder.create();
		builder.add(NewProjectWizard.class);
		builder.add(MyNextStep.class);
		return builder.build();
	}
}
----
